# -*- coding: utf-8 -*-
"""Regresia liniara Microsoft.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dIjCSXKEtbEY1UkfBvY8jKBIAsongQTR

Adaugarea bibliotecilor:
"""

!pip install pandas_datareader==0.10.0

import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

"""Colectarea datelor:"""

df = web.DataReader('MSFT', data_source='yahoo', start='2012-05-02', end='2022-05-02')

df = df[['Close']]

"""Afisarea datelor:"""

plt.figure(figsize=(10,5))
plt.title('Istoric pret de inchidere al actiunilor firmei Microsoft pe ultimii zece ani')
plt.plot(df)
plt.xlabel('Data', fontsize=18)
plt.ylabel('Pretul de inchidere in dolari ($)', fontsize=18)
plt.show()

"""Prelucrarea datelor:"""

lungime_date_antrenare = math.ceil (len(df) * .9)

plt.figure(figsize=(10,5))
plt.title('Imparțim datele în date de antrenare (90%) și date de testare (10%)')
plt.plot(df[0:lungime_date_antrenare]['Close'])
plt.plot(df[lungime_date_antrenare:]['Close'])
plt.xlabel('Data', fontsize=18)
plt.ylabel('Pretul de inchidere in dolari ($)', fontsize=18)
plt.legend(['Datele de antrenare', 'Datele de testare'], loc='lower right')
plt.show()

numar_predictii = math.ceil (len(df) * .1)

df['Predictii'] = df[['Close']].shift(-numar_predictii)

X = np.array(df.drop(['Predictii'], 1))[:-numar_predictii]

Y = np.array(df['Predictii'])[:-numar_predictii]

x_antrenare, x_test, y_antrenare, y_test = train_test_split(X, Y, test_size = 0.1)

"""Crearea regresiei liniare"""

regresie = LinearRegression().fit(x_antrenare, y_antrenare)

"""Pregatirea datelor pentru predictii"""

x_viitor = df.drop(['Predictii'], 1)[:-numar_predictii]
x_viitor = x_viitor.tail(numar_predictii)
x_viitor = np.array(x_viitor)

"""Efectuarea predictiilor:"""

predictii = regresie.predict(x_viitor)

antrenare = df[:lungime_date_antrenare]
lungime_date_antrenare1 = math.ceil (len(df) * .9)
validare = df[lungime_date_antrenare-1:]
validare['Predictii'] = predictii

"""Afisarea predictiilor:"""

plt.figure(figsize=(10,5))
plt.title('Predicția prețului acțiunilor firmei Microsoft folosind regresia liniară')
plt.xlabel('Data')
plt.ylabel('Prețul de închidere în dolari ($)')
plt.plot(validare['Close'], color='orangered')
plt.plot(validare['Predictii'], color='limegreen')
plt.legend(['Valoarea reală', 'Predicțiile'], loc='lower right')
plt.show()

plt.figure(figsize=(14,7))
plt.title('Predicția prețului acțiunilor firmei Microsoft folosind regresia liniară')
plt.xlabel('Data')
plt.ylabel('Prețul de închidere în dolari ($)', fontsize=18)
plt.plot(df['Close'])
plt.plot(validare['Close'])
plt.plot(validare['Predictii'], color='limegreen')
plt.legend(['Datele de antrenare', 'Datele de validare', 'Predicțiile'], loc='lower right')
plt.show()

"""Calculare MAPE"""

mape = np.mean(np.abs(validare['Predictii'] - validare['Close'])/np.abs(validare['Close']))
print('Eroare procentuala media absoluta (MAPE) =', mape)